This is the implementation of the Grand Comics Database in Python using the
Django framework.

For basic information, see the README file in the project's root directory.

This file explains the specifics of setting up a development environment on
Windows. There are some differences between x32 and x64 installs at this
time.

0.  You'll need Python.  We are currently using Python 2.7. 
http://www.python.org/download/
python.org distribution is preferred as ActiveState Python has some purchase
'enforcing' on x64 (see Note 1). ActiveState seems OK for x32 though.

===============================================================================
= Git and GitHub
===============================================================================

** Install git, which may be found through http://github.com/

** Clone the repository.  The GitHub web page is:
https://github.com/GrandComicsDatabase/gcd-django
See the GitHub help documentation for options, and contact the gcd-tech
mailing list if you need assistance.

===============================================================================
= Applications and non-Python libraries
===============================================================================

MySQL
=====
Install MySQL (version 5.5.x is currently in production)
http://dev.mysql.com/downloads/

Put the following lines in your configuration (my.cnf) if not already there.

default-character-set = utf8
default-storage-engine = InnoDB

These settings will save you from accidentally not using foreign keys or
transactions, or from trying to stuff unicode into an 8-bit character set.
None of those are fun to debug or recover from.

CSSTidy
=======
CSSTidy is an executable required by django-compressor. If DEBUG=True, the
default setting, django-compressor is not active, therefore CSSTidy is not
needed if you are only working with DEBUG=True.

http://csstidy.sourceforge.net/

It just needs to be somewhere in the PATH. Using 32bit executable for 64bit
seems fine, but building 64bit version is also possible, see Note 3.

===============================================================================
= Python and bootstrapping the library install.
===============================================================================

EASY-INSTALL
============
Get it from http://pypi.python.org/pypi/setuptools#windows

32-bit version of Python
    Install setuptools using the provided .exe installer.

64-bit versions of Python: download ez_setup.py and run it; it will download
the appropriate .egg file and install it for you.
Currently, the provided .exe installer does not support 64-bit versions of
Python for Windows, due to a distutils installer compatibility issue

VIRTUALENV / PIP
================
We recommend using virtualenv, but it is optional.  It will allow you to isolate
the libraries you need for the GCD, and not contaminate your system python.

For more on installing and using virtualenv, see
http://www.virtualenv.org/en/latest/index.html

The recommended way to use pip is within virtualenv, since every virtualenv
has pip installed in it automatically. So do
easy_install.exe virtualenv

If you do not want to use virtualenv install pip using
easy_install.exe pip

Use pip to install virtualenv, and then create a virtualenv for use with the
GCD.  For this example, we will create one called "gcd" in a directory called
"virtualenvs".

Now create a virtualenv
virtualenv.exe \path\to\env\gcd

and activate the virtualenv
\path\to\env\gcd\Scripts\activate

Note that "(gcd)" at the beginning of the prompt.  Now all Python execution
and installation will occur inside of the "gcd" virtual env, i.e.
\path\to\env\gcd\.

===============================================================================
= Python libraries
===============================================================================

Inside the git-shell installed by github do
\path\to\env\gcd\Scripts\activate
Or make sure git is in your path if using a different shell and activate
the virtualenv. We assume nothing is installed in it.

Now go the the directory with the cloned git repo "gcd-django".

We use pip and our checked-in requirements file to install all necessary Python
packages. You either downloaded the pre-compiled packages mentioned above or
under 64bit you considered Note 2. Under 32bit this might work without any
of the two, but you might need further C/C++ libraries compiled and installed
(such as libicu, and optionally some supplemental libraries for PIL depending
on how much of the image editing you want to be able to do).

You could also just run pip without the virtualenv to install everything into
your system python's site-packages tree, but we recommend to use virtualenv.

COMPILING PACKAGES
==================
Three of the python packages need compiling. This typically additional installs
and on x64 does not work out of the box. The easy way is to use the

Unofficial Windows Binaries for Python Extension Packages

MySQL-python
============
http://www.lfd.uci.edu/~gohlke/pythonlibs/#mysql-python
PIL
===
http://www.lfd.uci.edu/~gohlke/pythonlibs/#pil
PyICU
=====
http://www.lfd.uci.edu/~gohlke/pythonlibs/#pyicu

The installer on these are set up to put the libs into your Python install,
however they are just zip files (or something that can be opened with 7zip).
If you're using virtualenv, you can extract the files out into your
virtualenv's site-packages directory, or copy all corresponding files from
the global site-packages directory to the one from the virtualenv.

Or go to Note 2 for information on compiling these.

INSTALLING PACKAGES
===================

The normal setup using pip tries to install the latest versions of everything.

If you downloaded and installed the packages which require compilation
MySQL-python, PIL, PyICU
you need to edit requirements.txt and replace the entry "Pillow" by "PIL".

pip install -r requirements.txt
# You can also just open up the requirements.txt and install each line separately.
# It is safe to re-run pip, since if everything installed properly, it will just
# check each library and skip it as already installed.

This should install Django and every other python package you need to
run the site and post code reviews for the project.

===============================================================================
= The GCD project and apps
===============================================================================

Now go to Getting_Started.txt for information on how to setup the environment
using a dump from the GCD project.


7.  Go in gcd-django, open settings.py and take a look at it.
If you need to change any settings, such as the database settings, create there a file called settings_local.py.
Put the changed or added settings in that file.  
They will automatically override the settings in the regular settings.py file.
Our Git ignore settings will ignore the settings_local.py file.
So you won't get annoying question mark entries when you check status.
By default, we assume that the database is called “gcdonline”.
It can be accessed by a user called “gcdonline” with no password.
If you set your database up differently, look for settings that start with DATABASE.
Override them appropriately.  
http://www.djangoproject.com/ has lots of excellent documentation of all of the available settings.

8. Download a data dump from http://www.comics.org/download/
(You need to log into GCD to perform this task)
I’m actually using “gcd” for database and log as root.
From MySQL Command Line Client: (mysql.exe -uroot –p***) 
create schema gcd;
From command:
mysql.exe –v -uroot –p*** gcd < dump.sql
(You’ll WANT –v! That’s poor man’s Matrix!)
(Actually, otherwise you’ll be under the impression that nothing happens)

9. From the gcd-django/ directory, run:
manage.py syncdb
This will create the various tables that are not present in the data dump and load data in tables that need them. 
Now, instead of creating a local admin in the syncdb step, you should load several additional data fixtures:
manage.py loaddata support
manage.py loaddata users
You MUST load the support fixture first, because the data in the users table depends on it.
(Specifically, gcd_indexers has a foreign key to gcd_country).
This will give you an admin user (who has all privileges but has index reservation
limits set to zero), at least one editor and one indexer, and an anonymous user.
The usernames, email addresses and passwords can be seen in the fixture file,
which is located at apps/gcd/fixtures/users.yaml
There is also a "site" fixture just sets up your site URL (used by Django's
admin UI in the "see on site" links) for localhost:8000.  You may prefer to
just set this manually in the admin UI if you are using a different test URL.
If you want to use it, it loads like the others:
manage.py loaddata site
Finally, the standard vote types for the voting application can be loaded:
manage.py loaddata vote-types
The production agendas and mailing lists, while basically standard, are not treated specially in the code so they are not supplied as fixtures.
Please inquire at http://groups.google.com/group/gcd-tech/ about what must be done.
Or if you're feeling exceptionally brave you can try the next step and attempt to debug things by matching up database scripts.  
We do not recommend this :-)
Be aware that the migration script, once it exists, may take quite some time to run
Possibly longer than the data took to load, depending on what sort of table changes are being made.
Note: MySQL runs in safe updates mode on Windows by default
Before running migration scripts one needs to set “safe updates” to 0:
        set sql_safe_updates=0;
You can verify using:
        show variables like'%sql_safe%';
10.  Finally, run:
manage.py runserver (lightweight web server for Django testing)
Take a look at http://127.0.0.1:8000/
11.  When you start making changes, go to the wiki at http://docs.comics.org/ for instructions on how to get code reviewed before checking.  
You'll need to set up an account with our Review Board instance and get added to the SourceForge project with write permissions, as noted on the wiki.  
Submissions that do not first go through code review will be reverted without notice.

Note 1 ActivePython
===================
Ex:
pypm install setuptools
The following packages will be installed into "%APPDATA%Python" (2.7):
 distribute-0.6.27
error: Can't install distribute-0.6.27: requires Business Edition subscription
*** If you have purchased ActivePython Business Edition, please login to
*** your account at:
***   https://account.activestate.com/
*** and download and run the license installer for your platform.
***
*** Please visit  to learn more
*** about the ActivePython Business Edition offering.

Note 2 Compiling
================

There are differences between installing on x32 vs. x64. The following notes
concentrate on x64. They might apply to x32, but might not be necessary.

Visual Studio 2008 Express
==========================
Install Visual Studio 2008 Express (free from Microsoft)
VS 2008 Express installs an x86 program on x64 Windows OS.
Also, it only allows 32bit building thru the GUI. (Regardless of the OS being
x86 or x64)
64bit building is possible thru CLI by installing also Microsoft Windows SDK
for Windows 7 and .NET Framework 4:
http://www.microsoft.com/en-us/download/details.aspx?id=8279

Launch:
Visual Studio 2008 x64 Win64 Command Prompt, which is located in
"C:Program Files (x86)Microsoft Visual Studio 9.0VCbin"
This console will be used later for modules which need building.
Tip: copy a shortcut to your desktop.
As VS 2008 is used, use only pre-compiled libraries built with this version.

Go to C:Python27Libdistutils
Edit msvc9compiler.py, search for MANIFESTFILE, you will find the following line
ld_args.append('/MANIFESTFILE:' + temp_manifest)
Duplicate then edit as the following line: 
ld_args.append('/MANIFEST')

Compiling Packages
==================

The following applies in particular to 64bit Windows, since setuptools
and easy_install are not fully supported under 64bit. Under 32bit the install
above using pip could work, but is unconfirmed at this time.

Note 2a MySQLdb
===============
Install the MySQLdb Python module from
http://sourceforge.net/projects/mysql-python 
Be certain that you get 1.2.3 or higher for Python 2.7 support.
Download source distribution of MySQLdb.

Install MySQL Connector/C (if not already installed above)
http://dev.mysql.com/downloads/connector/c/  [Windows (x86, 64-bit), MSI Installer]

Add C:Program FilesMySQLMySQL Connector C 6.0.2include to PATH.

Using the VC console go to MySQL-python-1.2.3 source distribution folder.
Open the site.cfg and make the following modification
Comment the following line using #:
#registry_key=SOFTWAREMySQL ABMySQL Server 5.0
And add the line: 
registry_key=SOFTWAREWow6432NodeMySQL ABMySQL Server 5.5
(Based on the version of the MySQL server, change the 5.5 to whatever is the
version you installed]
Then modify the setup_windows.py by adding the lib_dirs and include_dirs. 
Here we add the directories for the MySQL Connector C.
 library_dirs=[ os.path.join(mysql_root, r'libopt'), "C:Program FilesMySQLConnector C 6.0.2libopt" ]
 include_dirs=[ os.path.join(mysql_root, r'include'), "C:Program FilesMySQLConnector C 6.0.2include" ]
Run: setup.py install
Procedure for MySQLdb should have completed successful

Inspired by: Install Python-MySql on Windows 7 64-bit
http://chaos.weblogs.us/archives/327
(This article needs many corrections though a useful starting point)

Note 2b PIL
===========
Install the Python Imaging Library (PIL), which for some annoying reason often
does not work with easy_install.
We are using version 1.1.7
Download Python Imaging Library 1.1.7 Source Kit 
http://www.pythonware.com/products/pil/
You'll need C libraries to enable the support of some file formats.

JPEG 
Download source distribution (find the link to zip archive)
http://www.ijg.org/
Extract and open a VC9 console (see 4.b)
Cd ***Libjpeg-8d
Rename jconfig.vc to jconfig.h
Rename makefile.vc to makefile
Run nmake
There are a lot of warnings if you not are confident about the result run nmake again(clean!)

ZLIB (support of PNG image files)
Download source distribution (find the link to zip archive)
http://www.zlib.net/ 
Extract and open a VC9 console (see 4.b)
cd ***Libzlib-1.2.7contribmasmx64
bld_ml64.bat
cl /c /I .... inffas8664.c
cd ....
nmake -f win32/Makefile.msc AS=ml64 LOC="-DASMV -DASMINF -I."OBJA="inffasx64.obj gvmat64.obj inffas8664.obj" all
Then build PIL
Update JPEG_ROOT and ZLIB_ROOT in setup.py with right paths to libraries.
Run:
setup.py buildext –i
selftest.py (IMPORTANT: to check result is OK)

Note 2c PyICU
=============
Install the ICU library.
http://site.icu-project.org/
You'll need the pre-compiled library for VC9 (ICU 1.44 at most)
After installing the ICU libraries, install PyICU, the Python bindings:
http://pypi.python.org/pypi/PyICU/1.2
You can use PyICU 1.2 at most with above pre-compiled library.
For PyICU 1.4, one needs to build ICU 1.49 using VC9.
This can be done by building thru Cygwin.
Once Cygwin gets installed, be sure to have ***Cygwinbin in the PATH.
cd icusource
Run:
bash
./configure
make
Resulting libraries will be located in lib directory (both static and dynamic)

Note 3 CSStidy
==============
One needs to install scons 1.3.1 (later versions didn't work for me)
http://www.scons.org/
Download zip, run setup.py install.
Download CSStidy source distribution from:
http://csstidy.sourceforge.net/
VC9 won't build it properly
Fix is not too difficult though.
Solution comes from:
http://stackoverflow.com/questions/3075697/non-existent-member-function-specified-as-friend
Edit umap.hpp
Move class iterator definition block toward the first line of public: (of class umap)
