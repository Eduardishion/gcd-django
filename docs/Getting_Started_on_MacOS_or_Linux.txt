This is the implementation of the Grand Comics Database in Python
using the Django framework.

For basic information, see the README file in the project's root directory.

This file explains the specifics of setting up a development environment
on MacOS X or Linux.  Note that your Linux distribution's package management
system may be able to handle much of the installation work for you.

This file assumes that you're cloning the "master" branch from github.
If you want to run the current production branch, please inquire
as to which branch is current at http://groups.google.com/group/gcd-tech/

To run:

0.  You'll need Python.  We are currently using Python 2.7.

===============================================================================
= Git and GitHub
===============================================================================

** Install git, which may be found through http://github.com/

** Clone the repository.  The GitHub web page is:
https://github.com/GrandComicsDatabase/gcd-django
See the GitHub help documentation for options, and contact the gcd-tech
mailing list if you need assistance.

===============================================================================
= Applications and non-Python libraries
===============================================================================

MySQL
=====
Install MySQL 5.1.  Put the following lines in your /etc/my.cnf

default-character-set = utf8
default-storage-engine = InnoDB

These settings will save you from accidentally not using foreign keys or
transactions, or from trying to stuff unicode into an 8-bit character set.
None of those are fun to debug or recover from.

ICU library
===========
Install the ICU library, which is C/C++ and may require compilation.
You will need this before you install the Python modules, as one of them
depends on it.  This is specifically icu4c, not the Java icu4j.

libicu builds fine on Mac OS X, and pre-built packages should exist for most
linux distributions:

http://site.icu-project.org/
RPM: libicu
Debian package: libicu40

If you do compile libicu yourself, the instructions on their readme.html
are absurdly complex.  Just do this (which worked on Mac OS X Snow Leopard):

bash:~$ tar xzvf icu-whatever.tgz # version 49 at the time of writing
bash:~$ cd icu/source
bash:~/icu/source$ ./configure
bash:~/icu/source$ gnumake
bash:~/icu/source$ sudo gnumake install

CSSTidy
=======
Install CSSTidy, which should exist as a package for most Linux distributions
(and possibly for MacPorts as well):
http://csstidy.sourceforge.net/
RPM: csstidy
Debian package: csstidy

===============================================================================
= Python and bootstrapping the library install.
===============================================================================

Python
======
Install Python if it did not come with your system.  Python 2.7 is recommended.
http://www.python.org/download/releases/2.7/

setuptools
==========
Install setuptools to get easy_install, which we primarily use to install
better installation tools.  
http://pypi.python.org/pypi/setuptools/0.6c11
See the web page for installation instructions.

pip
===
Use easy_install to install pip:

bash:~$ easy_install pip

If you have problems, see http://www.pip-installer.org/en/latest/

virtualenv
==========
Using virtualenv is optional, but it will allow you to isolate the libraries
you need for the GCD, and not contaminate your system python.

Use pip to install virtualenv, and then create a virtualenv for use with the
GCD.  For this example, we will create one called "gcd" in a directory called
"virtualenvs".  

bash:~$ pip install virtualenv
# lots of output
bash:~$ mkdir virtualenvs
bash:~$ cd virtualenvs
bash:~/virtualenvs$ virtualenv gcd
New python executable in gcd/bin/python
Installing setuptools............done.
Installing pip...............done.
bash:virtualenvs$ ls
gcd
bash:virtualenvs$ source gcd/bin/activate
(gcd)bash:virtualenvs$

# Note that "(gcd)" at the beginning of the prompt.  Now all Python execution
and installation will occur inside of the "gcd" virtual env, i.e. ~/virtualenvs/gcd.

For more on installing and using virtualenv, see
http://www.virtualenv.org/en/latest/index.html

distribute
==========
Finally, some of the libraries require "distribute", a replacement for setuptools
which you installed earlier.  A botched installation of distribute can leave your
python system unusable, so this is where using a virtualenv can be handy, as
a botched virtualenv can just be thown away.  If you break your system python,
see the distribute package's documentation for repair instructions.

The main way to break your python setup is to try to install distribute with pip.
That is supposed to work, but often does not.  Instead, use distribute_setup.py

(gcd)bash:~$ curl -O http://python-distribute.org/distribute_setup.py
(gcd)bash:~$ python distribute_setup.py

Now, after installing up to four different package management libraries, you are
finally ready to actually install the libraries needed for the GCD.

===============================================================================
= Python libraries
===============================================================================

Assuming you've already activated the virtualenv (but not installed anything
further in it), and cloned the git repo to ~/git/gcd-django, use pip and
our checked-in requirements file to install all necessary Python libraries.
Make certain that you have any C/C++ libraries already compiled and installed
(such as libicu, and optionally some supplemental libraries for PIL depending
on how much of the image editing you want to be able to do).

You can also just run this pip command without the virtualenv to install
everything into your system python's site-packages tree.

Debian packages, RPMs and MacPorts packages are available for many of the
Python libraries, and if you prefer to use those, please remember to
make a copy of requirements.txt and remove the libraries that you
installed through other means.  If the OS packages were of older Python
library verions, you may need to adjust the versions in your requirements.txt
to match.  See the pip documentation for the requirements.txt format. 

This file tries to install the latest versions of everything.
PLEASE NOTE:  If the latest version of PyICU does not match the version of
libicu that you installed, you may need to try an older version of PyICU,
which should generally work fine with the GCD.  For instance PyICU 1.0
was known to work with libicu 4.4 as of October 2012.

(gcd)bash:~/git/gcd-django$ pip install -r requirements.txt
# A ton of output happens here, especially for PIL compilation.
# You can also just open up the requirements. text and install each line separately.
# It is safe to re-run pip, since if everything installed properly, it will just
# check each library and skip it as already installed.

This should install Django and every other python package you need to
run the site and post code reviews for the project.

===============================================================================
= The GCD project and apps
===============================================================================

settings.py and settings_local.py
=================================
In the top level directory of your repository clone, open up settings.py and
take a look at it.  You should create a settings_local.py file in the same
directory, and override any values from settings.py that need overriding in
that settings_local.py.  Do not modify settings.py itself, unless you need
to push a change out to all other development and production environments.

Our .gitignore settings will prevent git from noticing settings_local.py.

The settings.py file has numerous comments indicating what needs to be overridden.
The most obvious is the DATABASES group of settings.

Creating your test database
===========================
Create your database and set up whatever permissions you want.  Django
will create the tables for you, but you need to create the database first.

If you want data in your database, and know that the current development master
matches the production shema, you can load a data dump from

http://www.comics.org/download/

Contact the GCD tech team to find out if the development and production
schemas currently match, and what to do if they do not.

Populating your database with empty tables
==========================================
From the root project directory, run

python manage.py syncdb

which will create the various tables that are not present in the data dump and
load data in tables that need them. DO NOT create a local admin user when
syncdb prompts you to do so.  Creating such a user will produce a user without
a profile (gcd_indexer row) which will cause problems.  

At this time you may be able to test your installation and data import using a 
read-only mode. This is possible if no migration scripts as mentioned in section
8 are needed. If this is the case, you can set READ_ONLY = True or NO_OI = True 
in settings_local.py and skip the remainder of this and the next section and 
go to point 9. Essentially you can just try the steps at point 9 now with the 
mentioned setting, if it fails proceed from here before asking for help :-)

Adding essential data to the tables
===================================
Now, instead of creating a local admin in the syncdb step, you should load 
several additional data fixtures:

python manage.py loaddata support
python manage.py loaddata users
python manage.py loaddata imagetype
python manage.py loaddata countstats

You MUST load the support fixture first, because the data in the users table
depends on it (specifically, gcd_indexers has a foreign key to gcd_country).

This will give you an admin user (who has all priviliges but has index reservation
limits set to zero), at least one editor and one indexer, and an anonymous user.
The usernames, email addresses and passwords can be seen in the fixture file,
which is located at apps/gcd/fixtures/users.yaml

There is also a "site" fixture just sets up your site URL (used by Django's
admin UI in the "see on site" links) for localhost:8000.  You may prefer to
just set this manually in the admin UI if you are using a different test URL.
If you want to use it, it loads like the others:

python manage.py loaddata site

Finally, the standard vote types for the voting appliacation can be laoded:

python manage.py loaddata vote-types

The production agendas and mailing lists, while basically stanadard, are not
treated specially in the code so they are not supplied as fixtures.

Performing any necessary schema migrations
==========================================
Assuming you are running the master branch you may need to migrate your
database dump from the production form to the current HEAD form.
We are in the process of making this easier- for now, if it looks like you have
some sort of database mismatch, please contact the gcd-tech mailing list.

Launching your test web server
==============================
Finally, run:

python manage.py runserver

and take a look at http://127.0.0.1:8000/

If you don't get any page at all, check http://www.djangoproject.com/ if it
looks like Django isn't configured correctly, or
http://dev.comics.org/ and/or http://groups.google.com/group/gcd-tech/
if it appears to be a code problem.

Proposing your first change for review
======================================
When you start making changes, go to the wiki at http://docs.comics.org/
for instructions on how to get code reviewed before checkin.  You'll need
to set up an account with our Review Board instance so that we can review
your first pull request before deciding whether to accept it.  If you develop
a good record of contributions, you will be granted direct access to the project.

Submissions to the project-owned repository that do not first go through
code review will be reverted without notice.

